{"remainingRequest":"/Users/m67abyari/cov-info/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/m67abyari/cov-info/src/components/PieChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/m67abyari/cov-info/src/components/PieChart.vue","mtime":1631161772839},{"path":"/Users/m67abyari/cov-info/node_modules/cache-loader/dist/cjs.js","mtime":1630730682042},{"path":"/Users/m67abyari/cov-info/node_modules/babel-loader/lib/index.js","mtime":1630730686592},{"path":"/Users/m67abyari/cov-info/node_modules/cache-loader/dist/cjs.js","mtime":1630730682042},{"path":"/Users/m67abyari/cov-info/node_modules/vue-loader/lib/index.js","mtime":1630730687738}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KCmltcG9ydCB7IFBpZSB9IGZyb20gJ3Z1ZS1jaGFydGpzJzsKCmV4cG9ydCBkZWZhdWx0IHsKICAgZXh0ZW5kczogUGllLAogICBkYXRhKCkgewogICAgIGNvbnN0IGRvc2UyUG9wdWxhdGlvbiA9IHRoaXMuJGF0dHJzLmNoYXJ0RGF0YS5tYXAoKGkpID0+IHsKICAgICAgIHJldHVybiBNYXRoLmZsb29yKGkuZG9zZTJfcGVyYyAqIGkucG9wdWxhdGlvbiAvIDEwMCApOwogICAgIH0pOwogICAgIGNvbnNvbGUubG9nKGRvc2UyUG9wdWxhdGlvbik7CiAgICAgY29uc3QgZG9zZTEgPSB0aGlzLiRhdHRycy5jaGFydERhdGEucmVkdWNlKChuLCB7ZG9zZTFfY291bnR9KSA9PiBuICsgZG9zZTFfY291bnQsIDApOwogICAgIGNvbnN0IGRvc2UyID0gXy5zdW0oZG9zZTJQb3B1bGF0aW9uKSAKICAgICAKICAgICBjb25zb2xlLmxvZyhkb3NlMik7CgogICAgLy8gIGNvbnN0IGRvc2UxcGVyYyA9IChkb3NlMSAvIHBvcHVsYXRpb24gKiAxMDApOwogICAgLy8gIGNvbnN0IGRvc2UyID0gKHRoaXMuJGF0dHJzLmNoYXJ0RGF0YS5yZWR1Y2UoKG4sIHtkb3NlMl9jb3VudH0pID0+IG4gKyBkb3NlMl9jb3VudCwgMCkgLyBwb3B1bGF0aW9uICogMTAwKTsKICAgIC8vICBjb25zdCBub25WYWNjaW5hdGVkID0gKHBvcHVsYXRpb24gLSAoZG9zZTEgKyBkb3NlMikpIC8gcG9wdWxhdGlvbiAqIDEwMCA7CiAgICAgY29uc3QgcG9wdWxhdGlvbiA9IHRoaXMuJGF0dHJzLmNoYXJ0RGF0YS5yZWR1Y2UoKG4sIHtwb3B1bGF0aW9ufSkgPT4gbiArIHBvcHVsYXRpb24sIDApOwogICAgIGNvbnN0IG5vblZhY2NpbmF0ZWQgPSBwb3B1bGF0aW9uIC0gKGRvc2UxICsgZG9zZTIpOwoKICAgICAgcmV0dXJuIHsKICAgICAgICBjaGFydERhdGE6IHsKICAgICAgICAgIGxhYmVsczogWyJOb24tVmFjY2luYXRlZCIsICJGdWxseSBWYWNjaW5hdGVkIiwgIjFzdCBEb3NlLVZhY2NpbmF0ZWQiCiAgICAgICAgICBdLAogICAgICAgICAgZGF0YXNldHM6IFt7CiAgICAgICAgICAgIGxhYmVsOiAnUGllIENoYXJ0JywKICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDEsCiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogWwogICAgICAgICAgICAgICdyZ2JhKDI1NSwgOTksIDEzMiwgMC4yKScsCiAgICAgICAgICAgICAgJ3JnYmEoNTQsIDE2MiwgMjM1LCAwLjIpJywKICAgICAgICAgICAgICAncmdiYSgyNTUsIDIwNiwgODYsIDAuMiknLAogICAgICAgICAgICBdLAogICAgICAgICAgICBib3JkZXJDb2xvcjogWwogICAgICAgICAgICAgICdyZ2JhKDI1NSw5OSwxMzIsMSknLAogICAgICAgICAgICAgICdyZ2JhKDU0LCAxNjIsIDIzNSwgMSknLAogICAgICAgICAgICAgICdyZ2JhKDI1NSwgMjA2LCA4NiwgMSknLAogICAgICAgICAgICBdLAogICAgICAgICAgICBwb2ludEJvcmRlckNvbG9yOiAnIzI1NTRGRicsCiAgICAgICAgICAgIGRhdGE6IFtub25WYWNjaW5hdGVkLGRvc2UyLGRvc2UxXQogICAgICAgICAgfV0KICAgICAgICB9LAogICAgICAgIG9wdGlvbnM6IHsKICAgICAgICAgIGxlZ2VuZDogewogICAgICAgICAgICBkaXNwbGF5OiB0cnVlLAogICAgICAgICAgICBwb3NpdGlvbjogJ2JvdHRvbScKICAgICAgICAgIH0sCiAgICAgICAgICByZXNwb25zaXZlOiB0cnVlLAogICAgICAgICAgbWFpbnRhaW5Bc3BlY3RSYXRpbzogZmFsc2UKICAgICAgICB9CiAgICAgIH0KICAgfSwKICAgYXN5bmMgbW91bnRlZCAoKSB7CiAgICAgIHRoaXMucmVuZGVyQ2hhcnQodGhpcy5jaGFydERhdGEsIHRoaXMub3B0aW9ucykKICAgfSwKfQo="},{"version":3,"sources":["PieChart.vue"],"names":[],"mappings":";;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"PieChart.vue","sourceRoot":"src/components","sourcesContent":["\n<script>\nimport { Pie } from 'vue-chartjs';\n\nexport default {\n   extends: Pie,\n   data() {\n     const dose2Population = this.$attrs.chartData.map((i) => {\n       return Math.floor(i.dose2_perc * i.population / 100 );\n     });\n     console.log(dose2Population);\n     const dose1 = this.$attrs.chartData.reduce((n, {dose1_count}) => n + dose1_count, 0);\n     const dose2 = _.sum(dose2Population) \n     \n     console.log(dose2);\n\n    //  const dose1perc = (dose1 / population * 100);\n    //  const dose2 = (this.$attrs.chartData.reduce((n, {dose2_count}) => n + dose2_count, 0) / population * 100);\n    //  const nonVaccinated = (population - (dose1 + dose2)) / population * 100 ;\n     const population = this.$attrs.chartData.reduce((n, {population}) => n + population, 0);\n     const nonVaccinated = population - (dose1 + dose2);\n\n      return {\n        chartData: {\n          labels: [\"Non-Vaccinated\", \"Fully Vaccinated\", \"1st Dose-Vaccinated\"\n          ],\n          datasets: [{\n            label: 'Pie Chart',\n            borderWidth: 1,\n            backgroundColor: [\n              'rgba(255, 99, 132, 0.2)',\n              'rgba(54, 162, 235, 0.2)',\n              'rgba(255, 206, 86, 0.2)',\n            ],\n            borderColor: [\n              'rgba(255,99,132,1)',\n              'rgba(54, 162, 235, 1)',\n              'rgba(255, 206, 86, 1)',\n            ],\n            pointBorderColor: '#2554FF',\n            data: [nonVaccinated,dose2,dose1]\n          }]\n        },\n        options: {\n          legend: {\n            display: true,\n            position: 'bottom'\n          },\n          responsive: true,\n          maintainAspectRatio: false\n        }\n      }\n   },\n   async mounted () {\n      this.renderChart(this.chartData, this.options)\n   },\n}\n</script>\n\n"]}]}