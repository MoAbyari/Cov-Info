{"remainingRequest":"/Users/m67abyari/cov-info/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/m67abyari/cov-info/src/components/LeafletMap.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/m67abyari/cov-info/src/components/LeafletMap.vue","mtime":1631234157569},{"path":"/Users/m67abyari/cov-info/node_modules/css-loader/dist/cjs.js","mtime":1630730684622},{"path":"/Users/m67abyari/cov-info/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1630730689988},{"path":"/Users/m67abyari/cov-info/node_modules/postcss-loader/src/index.js","mtime":1630730686469},{"path":"/Users/m67abyari/cov-info/node_modules/cache-loader/dist/cjs.js","mtime":1630730682042},{"path":"/Users/m67abyari/cov-info/node_modules/vue-loader/lib/index.js","mtime":1630730687738}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKI21hcENvbnRhaW5lciB7CiAgICBoZWlnaHQ6IDkwdmg7CiAgICBtYXJnaW46IDAgYXV0bzsKfQoKI2NvbnRhaW5lciB7CiAgICBwYWRkaW5nOiAzMHB4IDI5cHggNjBweCAyOXB4Owp9CgojY29udGFpbmVyIGgyIHsKICAgIGZvbnQtc2l6ZTogMjFweDsKICAgIHRleHQtYWxpZ246IGNlbnRlcjsKfQoKLmxlZ2VuZCB7CiAgICBsaW5lLWhlaWdodDogMThweDsKICAgIGNvbG9yOiByZ2IoMzUsIDI5LCAyOSk7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjU1LCAyNTUsIDI1NSwgMC40NSk7CiAgICBwYWRkaW5nOiA1cHggMTBweDsKICAgIGJvcmRlci1yYWRpdXM6IDMlOwp9CgouY2lyY2xlIHsKICAgIHdpZHRoOiAxOHB4OwogICAgaGVpZ2h0OiAxOHB4OwogICAgZmxvYXQ6IGxlZnQ7CiAgICBtYXJnaW4tcmlnaHQ6IDhweDsKICAgIG9wYWNpdHk6IDE7CiAgICBib3JkZXItcmFkaXVzOiA1MCU7Cn0gICAK"},{"version":3,"sources":["LeafletMap.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqHA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"LeafletMap.vue","sourceRoot":"src/components","sourcesContent":["<template>\n <div id=\"container\">\n     <h2>Map of NSW COVID-19 case locations</h2>\n   <div id=\"mapContainer\"></div>\n </div>\n</template>\n\n<script>\nimport \"leaflet/dist/leaflet.css\";\nimport { api } from '../helpers/helpers';\nimport L from \"leaflet\";\nimport _ from 'lodash';\nconst getColor = (d) => {\n                return  d > 1000 ? '#3D2807' :\n                        d > 500  ? '#bd0026' :\n                        d > 100  ? '#fb6a4a' :\n                        d > 50   ? '#fe9929' :\n                        d > 9   ?   'yellow' :\n                                    '#f0f0f0';\n        };\n\nexport default {\n    name: \"Map\",\n    data() {\n        return{\n            NSWGeoJson: [],\n            dailyCasesInState: [],\n            center: [-33.8555, 151.1155],\n        }\n    },\n    methods: {\n        getColor(d) {\n                return  d > 1000 ? '#3D2807' :\n                        d > 500  ? '#bd0026' :\n                        d > 100  ? '#fb6a4a' :\n                        d > 50   ? '#fe9929' :\n                        d > 10   ?   'yellow' :\n                                    '#f0f0f0';\n        },\n        styleMap(feature){\n            if (feature?.properties.LGA_CODE19) {\n                const lgaCode = feature.properties.LGA_CODE19;\n                const numberOfCasesByLga = _.find(this.dailyCasesInState, {lga_code: lgaCode});\n            \n                const totalCases = numberOfCasesByLga?.total_cases || 0;\n                const color = this.getColor(totalCases);\n                return { \n                    color: \"black\",\n                    fillColor: color,\n                    weight: 1,\n                    // opacity: 0.5,\n                    fillOpacity: 1\n                };\n            } else {\n                return { color: \"white\" };\n            }\n        },\n        onEachFeature(feature, layer) {\n            if (feature?.properties.LGA_CODE19) {\n                 const numberOfCasesByLga = _.find(this.dailyCasesInState, {lga_code: feature.properties.LGA_CODE19});\n\n                if (numberOfCasesByLga) {\n                    layer.bindPopup(`${feature.properties.LGA_NAME19.bold()}, Total cases: ${numberOfCasesByLga.total_cases}`);\n                    layer.on('mouseover', () => { layer.openPopup(); });\n                    layer.on('mouseout', () => { layer.closePopup(); });\n                }\n            }\n        },\n        addLegend(mapDiv) {\n            const legend = L.control({position: 'bottomright'});\n\n            legend.onAdd = function () {\n                const div = L.DomUtil.create('div', 'info legend');\n                const grades = [1, 10, 50, 100, 500, 1000];\n                const labels = ['<strong>Number of Cases</strong><br>'];\n                \n\n                // loop through density intervals and generate a label with a colored square for each interval\n                for (let i = 0; i < grades.length; i++) {\n                div.innerHTML +=\n                labels.push(\n                    '<i class=\"circle\" style=\"background:' + getColor(grades[i] + 1) + '\"></i> ' +\n            grades[i] + (grades[i + 1] ? '&ndash;' + grades[i + 1] + '<br>' : '+'));\n                }\n                div.innerHTML = labels.join('<br>');\n                return div;\n            };\n            legend.addTo(mapDiv);\n        },\n        setupLeafletMap: function () {\n            const mapDiv = L.map(\"mapContainer\").setView(this.center, 8);\n            L.tileLayer(\n                \"https://api.mapbox.com/styles/v1/moabyari/cktbirbqp2m7v17o50gpwe5x6/tiles/{z}/{x}/{y}?access_token={accessToken}\",\n                {\n                    attribution:\n                    'Map data (c) <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery (c) <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n                    maxZoom: 16,\n                    minZoom: 6,\n                    id: \"mapbox/streets-v11\",\n                    accessToken: \"XXX\",\n                }).addTo(mapDiv);\n\n            L.geoJson(this.NSWGeoJson, {onEachFeature: this.onEachFeature, style: this.styleMap}).addTo(mapDiv);\n            return mapDiv;\n        },\n    },\n    async mounted() {\n        this.NSWGeoJson = await api.getNSWGeoJson();\n        this.dailyCasesInState = _.uniqBy(await api.getCasesInState(), 'lga_code');\n        const mapDiv = this.setupLeafletMap();\n        this.styleMap();\n        this.addLegend(mapDiv)\n    }\n};\n</script>\n\n<style>\n    #mapContainer {\n        height: 90vh;\n        margin: 0 auto;\n    }\n\n    #container {\n        padding: 30px 29px 60px 29px;\n    }\n\n    #container h2 {\n        font-size: 21px;\n        text-align: center;\n    }\n\n    .legend {\n        line-height: 18px;\n        color: rgb(35, 29, 29);\n        background-color: rgb(255, 255, 255, 0.45);\n        padding: 5px 10px;\n        border-radius: 3%;\n    }\n\n    .circle {\n        width: 18px;\n        height: 18px;\n        float: left;\n        margin-right: 8px;\n        opacity: 1;\n        border-radius: 50%;\n    }   \n</style>"]}]}