{"remainingRequest":"/Users/m67abyari/cov-info/node_modules/babel-loader/lib/index.js!/Users/m67abyari/cov-info/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/m67abyari/cov-info/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/m67abyari/cov-info/src/components/PieChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/m67abyari/cov-info/src/components/PieChart.vue","mtime":1631195563126},{"path":"/Users/m67abyari/cov-info/node_modules/cache-loader/dist/cjs.js","mtime":1630730682042},{"path":"/Users/m67abyari/cov-info/node_modules/babel-loader/lib/index.js","mtime":1630730686592},{"path":"/Users/m67abyari/cov-info/node_modules/cache-loader/dist/cjs.js","mtime":1630730682042},{"path":"/Users/m67abyari/cov-info/node_modules/vue-loader/lib/index.js","mtime":1630730687738}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9tNjdhYnlhcmkvY292LWluZm8vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcC5qcyI7Ci8vCmltcG9ydCB7IFBpZSB9IGZyb20gJ3Z1ZS1jaGFydGpzJzsKaW1wb3J0IF8gZnJvbSAnbG9kYXNoJzsKZXhwb3J0IGRlZmF1bHQgewogIGV4dGVuZHM6IFBpZSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgdmFyIHBvcHVsYXRpb24gPSA4MTY2MDAwOyAvLyBjb25zb2xlLmxvZyhwb3B1bGF0aW9uKTsKCiAgICB2YXIgZG9zZTJQb3B1bGF0aW9uID0gdGhpcy4kYXR0cnMuY2hhcnREYXRhLm1hcChmdW5jdGlvbiAoaSkgewogICAgICByZXR1cm4gTWF0aC5mbG9vcihpLmRvc2UyX3BlcmMgKiBpLnBvcHVsYXRpb24gLyAxMDApOwogICAgfSk7CgogICAgdmFyIGRvc2UyID0gXy5zdW0oZG9zZTJQb3B1bGF0aW9uKTsgLy8gIGNvbnNvbGUubG9nKCJkb3NlMiIsIGRvc2UyKTsKCgogICAgdmFyIGRvc2UxID0gdGhpcy4kYXR0cnMuY2hhcnREYXRhLnJlZHVjZShmdW5jdGlvbiAobiwgX3JlZikgewogICAgICB2YXIgZG9zZTFfY291bnQgPSBfcmVmLmRvc2UxX2NvdW50OwogICAgICByZXR1cm4gbiArIGRvc2UxX2NvdW50OwogICAgfSwgMCk7IC8vICBjb25zb2xlLmxvZygiZG9zZTEiLGRvc2UxKTsKCiAgICB2YXIgZG9zZTFwZXJjID0gTWF0aC5mbG9vcihkb3NlMSAvIHBvcHVsYXRpb24gKiAxMDApOwogICAgdmFyIGRvc2UycGVyYyA9IE1hdGguZmxvb3IoZG9zZTIgLyBwb3B1bGF0aW9uICogMTAwKTsKICAgIHZhciBub25WYWNjaW5hdGVkID0gTWF0aC5mbG9vcigocG9wdWxhdGlvbiAtIChkb3NlMSArIGRvc2UyKSkgLyBwb3B1bGF0aW9uICogMTAwKTsKICAgIHJldHVybiB7CiAgICAgIGNoYXJ0RGF0YTogewogICAgICAgIGxhYmVsczogWyJOb24tVmFjY2luYXRlZCIsICJGdWxseSBWYWNjaW5hdGVkIiwgIjFzdCBEb3NlLVZhY2NpbmF0ZWQiXSwKICAgICAgICBkYXRhc2V0czogW3sKICAgICAgICAgIGxhYmVsOiAnUGllIENoYXJ0JywKICAgICAgICAgIGJvcmRlcldpZHRoOiAxLAogICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBbJ3JnYmEoMjU1LCA5OSwgMTMyLCAwLjIpJywgJ3JnYmEoNTQsIDE2MiwgMjM1LCAwLjIpJywgJ3JnYmEoMjU1LCAyMDYsIDg2LCAwLjIpJ10sCiAgICAgICAgICBib3JkZXJDb2xvcjogWydyZ2JhKDI1NSw5OSwxMzIsMSknLCAncmdiYSg1NCwgMTYyLCAyMzUsIDEpJywgJ3JnYmEoMjU1LCAyMDYsIDg2LCAxKSddLAogICAgICAgICAgcG9pbnRCb3JkZXJDb2xvcjogJyMyNTU0RkYnLAogICAgICAgICAgZGF0YTogW25vblZhY2NpbmF0ZWQsIGRvc2UycGVyYywgZG9zZTFwZXJjXQogICAgICAgIH1dCiAgICAgIH0sCiAgICAgIG9wdGlvbnM6IHsKICAgICAgICBsZWdlbmQ6IHsKICAgICAgICAgIGRpc3BsYXk6IHRydWUsCiAgICAgICAgICBwb3NpdGlvbjogJ2JvdHRvbScKICAgICAgICB9LAogICAgICAgIGxheW91dDogewogICAgICAgICAgcGFkZGluZzogMTUKICAgICAgICB9LAogICAgICAgIHJlc3BvbnNpdmU6IHRydWUsCiAgICAgICAgbWFpbnRhaW5Bc3BlY3RSYXRpbzogZmFsc2UKICAgICAgfQogICAgfTsKICB9LAogIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBfdGhpcy5yZW5kZXJDaGFydChfdGhpcy5jaGFydERhdGEsIF90aGlzLm9wdGlvbnMpOwoKICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlKTsKICAgIH0pKSgpOwogIH0KfTs="},{"version":3,"sources":["PieChart.vue"],"names":[],"mappings":";;;;AAEA,SAAA,GAAA,QAAA,aAAA;AACA,OAAA,CAAA,MAAA,QAAA;AAEA,eAAA;AACA,EAAA,OAAA,EAAA,GADA;AAEA,EAAA,IAFA,kBAEA;AACA,QAAA,UAAA,GAAA,OAAA,CADA,CAEA;;AACA,QAAA,eAAA,GAAA,KAAA,MAAA,CAAA,SAAA,CAAA,GAAA,CAAA,UAAA,CAAA,EAAA;AACA,aAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA,UAAA,GAAA,CAAA,CAAA,UAAA,GAAA,GAAA,CAAA;AACA,KAFA,CAAA;;AAGA,QAAA,KAAA,GAAA,CAAA,CAAA,GAAA,CAAA,eAAA,CAAA,CANA,CAOA;;;AACA,QAAA,KAAA,GAAA,KAAA,MAAA,CAAA,SAAA,CAAA,MAAA,CAAA,UAAA,CAAA;AAAA,UAAA,WAAA,QAAA,WAAA;AAAA,aAAA,CAAA,GAAA,WAAA;AAAA,KAAA,EAAA,CAAA,CAAA,CARA,CASA;;AACA,QAAA,SAAA,GAAA,IAAA,CAAA,KAAA,CAAA,KAAA,GAAA,UAAA,GAAA,GAAA,CAAA;AACA,QAAA,SAAA,GAAA,IAAA,CAAA,KAAA,CAAA,KAAA,GAAA,UAAA,GAAA,GAAA,CAAA;AACA,QAAA,aAAA,GAAA,IAAA,CAAA,KAAA,CAAA,CAAA,UAAA,IAAA,KAAA,GAAA,KAAA,CAAA,IAAA,UAAA,GAAA,GAAA,CAAA;AAGA,WAAA;AACA,MAAA,SAAA,EAAA;AACA,QAAA,MAAA,EAAA,CAAA,gBAAA,EAAA,kBAAA,EAAA,qBAAA,CADA;AAGA,QAAA,QAAA,EAAA,CAAA;AACA,UAAA,KAAA,EAAA,WADA;AAEA,UAAA,WAAA,EAAA,CAFA;AAGA,UAAA,eAAA,EAAA,CACA,yBADA,EAEA,yBAFA,EAGA,yBAHA,CAHA;AAQA,UAAA,WAAA,EAAA,CACA,oBADA,EAEA,uBAFA,EAGA,uBAHA,CARA;AAaA,UAAA,gBAAA,EAAA,SAbA;AAcA,UAAA,IAAA,EAAA,CAAA,aAAA,EAAA,SAAA,EAAA,SAAA;AAdA,SAAA;AAHA,OADA;AAqBA,MAAA,OAAA,EAAA;AACA,QAAA,MAAA,EAAA;AACA,UAAA,OAAA,EAAA,IADA;AAEA,UAAA,QAAA,EAAA;AAFA,SADA;AAKA,QAAA,MAAA,EAAA;AACA,UAAA,OAAA,EAAA;AADA,SALA;AAQA,QAAA,UAAA,EAAA,IARA;AASA,QAAA,mBAAA,EAAA;AATA;AArBA,KAAA;AAkCA,GAnDA;AAoDA,EAAA,OApDA,qBAoDA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,cAAA,KAAA,CAAA,WAAA,CAAA,KAAA,CAAA,SAAA,EAAA,KAAA,CAAA,OAAA;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAtDA,CAAA","sourcesContent":["\n<script>\nimport { Pie } from 'vue-chartjs';\nimport _ from 'lodash';\n\nexport default {\n   extends: Pie,\n   data() {\n    const population = 8166000;\n    // console.log(population);\n    const dose2Population = this.$attrs.chartData.map((i) => {\n       return Math.floor(i.dose2_perc * i.population / 100 );\n     });\n    const dose2 = _.sum(dose2Population) \n    //  console.log(\"dose2\", dose2);\n    const dose1 = this.$attrs.chartData.reduce((n, {dose1_count}) => n + dose1_count, 0);\n    //  console.log(\"dose1\",dose1);\n    const dose1perc = Math.floor(dose1 / population * 100);\n    const dose2perc = Math.floor(dose2 / population * 100);\n    const nonVaccinated = Math.floor((population - (dose1 + dose2)) / population * 100);\n   \n\n      return {\n        chartData: {\n          labels: [\"Non-Vaccinated\", \"Fully Vaccinated\", \"1st Dose-Vaccinated\"\n          ],\n          datasets: [{\n            label: 'Pie Chart',\n            borderWidth: 1,\n            backgroundColor: [\n              'rgba(255, 99, 132, 0.2)',\n              'rgba(54, 162, 235, 0.2)',\n              'rgba(255, 206, 86, 0.2)',\n            ],\n            borderColor: [\n              'rgba(255,99,132,1)',\n              'rgba(54, 162, 235, 1)',\n              'rgba(255, 206, 86, 1)',\n            ],\n            pointBorderColor: '#2554FF',\n            data: [nonVaccinated,dose2perc,dose1perc]\n          }]\n        },\n        options: {\n          legend: {\n            display: true,\n            position: 'bottom',\n          },\n          layout:{\n            padding: 15\n          },\n          responsive: true,\n          maintainAspectRatio: false,\n        }\n\n      }\n   },\n   async mounted () {\n      this.renderChart(this.chartData, this.options);\n   },\n}\n</script>\n\n"],"sourceRoot":"src/components"}]}