{"remainingRequest":"/Users/m67abyari/cov-info/node_modules/babel-loader/lib/index.js!/Users/m67abyari/cov-info/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/m67abyari/cov-info/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/m67abyari/cov-info/src/components/LeafletMap.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/m67abyari/cov-info/src/components/LeafletMap.vue","mtime":1631145264179},{"path":"/Users/m67abyari/cov-info/node_modules/cache-loader/dist/cjs.js","mtime":1630730682042},{"path":"/Users/m67abyari/cov-info/node_modules/babel-loader/lib/index.js","mtime":1630730686592},{"path":"/Users/m67abyari/cov-info/node_modules/cache-loader/dist/cjs.js","mtime":1630730682042},{"path":"/Users/m67abyari/cov-info/node_modules/vue-loader/lib/index.js","mtime":1630730687738}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9tNjdhYnlhcmkvY292LWluZm8vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbmQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5jb25jYXQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuYm9sZC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcC5qcyI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCAibGVhZmxldC9kaXN0L2xlYWZsZXQuY3NzIjsKaW1wb3J0IHsgYXBpIH0gZnJvbSAnLi4vaGVscGVycy9oZWxwZXJzJzsKaW1wb3J0IEwgZnJvbSAibGVhZmxldCI7CmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiTWFwIiwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgTlNXR2VvSnNvbjogW10sCiAgICAgIGRhaWx5Q2FzZXNJblN0YXRlOiBbXSwKICAgICAgY2VudGVyOiBbLTMzLjg1NTUsIDE1MS4xMTU1XQogICAgfTsKICB9LAogIG1ldGhvZHM6IHsKICAgIGdldENvbG9yOiBmdW5jdGlvbiBnZXRDb2xvcihkKSB7CiAgICAgIHJldHVybiBkID4gMTAwMCA/ICcjM0QyODA3JyA6IGQgPiA1MDAgPyAnI2JkMDAyNicgOiBkID4gMTAwID8gJyNmYjZhNGEnIDogZCA+IDUwID8gJyNmZTk5MjknIDogZCA+IDkgPyAneWVsbG93JyA6ICcjZjBmMGYwJzsKICAgIH0sCiAgICBzdHlsZU1hcDogZnVuY3Rpb24gc3R5bGVNYXAoZmVhdHVyZSkgewogICAgICBpZiAoZmVhdHVyZSAhPT0gbnVsbCAmJiBmZWF0dXJlICE9PSB2b2lkIDAgJiYgZmVhdHVyZS5wcm9wZXJ0aWVzLkxHQV9DT0RFMTkpIHsKICAgICAgICB2YXIgbGdhQ29kZSA9IGZlYXR1cmUucHJvcGVydGllcy5MR0FfQ09ERTE5OwoKICAgICAgICB2YXIgbnVtYmVyT2ZDYXNlc0J5TGdhID0gXy5maW5kKHRoaXMuZGFpbHlDYXNlc0luU3RhdGUsIHsKICAgICAgICAgIGxnYV9jb2RlOiBsZ2FDb2RlCiAgICAgICAgfSk7CgogICAgICAgIHZhciB0b3RhbENhc2VzID0gKG51bWJlck9mQ2FzZXNCeUxnYSA9PT0gbnVsbCB8fCBudW1iZXJPZkNhc2VzQnlMZ2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG51bWJlck9mQ2FzZXNCeUxnYS50b3RhbF9jYXNlcykgfHwgMDsKICAgICAgICB2YXIgY29sb3IgPSB0aGlzLmdldENvbG9yKHRvdGFsQ2FzZXMpOwogICAgICAgIHJldHVybiB7CiAgICAgICAgICBjb2xvcjogImJsYWNrIiwKICAgICAgICAgIGZpbGxDb2xvcjogY29sb3IsCiAgICAgICAgICB3ZWlnaHQ6IDEsCiAgICAgICAgICAvLyBvcGFjaXR5OiAwLjUsCiAgICAgICAgICBmaWxsT3BhY2l0eTogMQogICAgICAgIH07CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIGNvbG9yOiAid2hpdGUiCiAgICAgICAgfTsKICAgICAgfQogICAgfSwKICAgIG9uRWFjaEZlYXR1cmU6IGZ1bmN0aW9uIG9uRWFjaEZlYXR1cmUoZmVhdHVyZSwgbGF5ZXIpIHsKICAgICAgaWYgKGZlYXR1cmUgIT09IG51bGwgJiYgZmVhdHVyZSAhPT0gdm9pZCAwICYmIGZlYXR1cmUucHJvcGVydGllcy5MR0FfQ09ERTE5KSB7CiAgICAgICAgdmFyIG51bWJlck9mQ2FzZXNCeUxnYSA9IF8uZmluZCh0aGlzLmRhaWx5Q2FzZXNJblN0YXRlLCB7CiAgICAgICAgICBsZ2FfY29kZTogZmVhdHVyZS5wcm9wZXJ0aWVzLkxHQV9DT0RFMTkKICAgICAgICB9KTsKCiAgICAgICAgaWYgKG51bWJlck9mQ2FzZXNCeUxnYSkgewogICAgICAgICAgbGF5ZXIuYmluZFBvcHVwKCIiLmNvbmNhdChmZWF0dXJlLnByb3BlcnRpZXMuTEdBX05BTUUxOS5ib2xkKCksICIsIFRvdGFsIGNhc2VzOiAiKS5jb25jYXQobnVtYmVyT2ZDYXNlc0J5TGdhLnRvdGFsX2Nhc2VzKSk7CiAgICAgICAgICBsYXllci5vbignbW91c2VvdmVyJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICBsYXllci5vcGVuUG9wdXAoKTsKICAgICAgICAgIH0pOwogICAgICAgICAgbGF5ZXIub24oJ21vdXNlb3V0JywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICBsYXllci5jbG9zZVBvcHVwKCk7CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICBzZXR1cExlYWZsZXRNYXA6IGZ1bmN0aW9uIHNldHVwTGVhZmxldE1hcCgpIHsKICAgICAgdmFyIG1hcERpdiA9IEwubWFwKCJtYXBDb250YWluZXIiKS5zZXRWaWV3KHRoaXMuY2VudGVyLCA4KTsKICAgICAgTC50aWxlTGF5ZXIoImh0dHBzOi8vYXBpLm1hcGJveC5jb20vc3R5bGVzL3YxL21vYWJ5YXJpL2NrdGJpcmJxcDJtN3YxN281MGdwd2U1eDYvdGlsZXMve3p9L3t4fS97eX0/YWNjZXNzX3Rva2VuPXthY2Nlc3NUb2tlbn0iLCB7CiAgICAgICAgYXR0cmlidXRpb246ICdNYXAgZGF0YSAoYykgPGEgaHJlZj0iaHR0cHM6Ly93d3cub3BlbnN0cmVldG1hcC5vcmcvIj5PcGVuU3RyZWV0TWFwPC9hPiBjb250cmlidXRvcnMsIDxhIGhyZWY9Imh0dHBzOi8vY3JlYXRpdmVjb21tb25zLm9yZy9saWNlbnNlcy9ieS1zYS8yLjAvIj5DQy1CWS1TQTwvYT4sIEltYWdlcnkgKGMpIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm1hcGJveC5jb20vIj5NYXBib3g8L2E+JywKICAgICAgICBtYXhab29tOiAxNiwKICAgICAgICBtaW5ab29tOiA3LAogICAgICAgIGlkOiAibWFwYm94L3N0cmVldHMtdjExIiwKICAgICAgICBhY2Nlc3NUb2tlbjogIlhYWCIKICAgICAgfSkuYWRkVG8obWFwRGl2KTsKICAgICAgTC5nZW9Kc29uKHRoaXMuTlNXR2VvSnNvbiwgewogICAgICAgIG9uRWFjaEZlYXR1cmU6IHRoaXMub25FYWNoRmVhdHVyZSwKICAgICAgICBzdHlsZTogdGhpcy5zdHlsZU1hcAogICAgICB9KS5hZGRUbyhtYXBEaXYpOwogICAgfQogIH0sCiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHsKICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyOwogICAgICAgICAgICAgIHJldHVybiBhcGkuZ2V0TlNXR2VvSnNvbigpOwoKICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIF90aGlzLk5TV0dlb0pzb24gPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgIF9jb250ZXh0LnQwID0gXzsKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNjsKICAgICAgICAgICAgICByZXR1cm4gYXBpLmdldENhc2VzSW5TdGF0ZSgpOwoKICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgIF9jb250ZXh0LnQxID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICBfdGhpcy5kYWlseUNhc2VzSW5TdGF0ZSA9IF9jb250ZXh0LnQwLnVuaXFCeS5jYWxsKF9jb250ZXh0LnQwLCBfY29udGV4dC50MSwgJ2xnYV9jb2RlJyk7CgogICAgICAgICAgICAgIF90aGlzLnNldHVwTGVhZmxldE1hcCgpOwoKICAgICAgICAgICAgICBfdGhpcy5zdHlsZU1hcCgpOwoKICAgICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZSk7CiAgICB9KSkoKTsKICB9Cn07"},{"version":3,"sources":["LeafletMap.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n <div id=\"container\">\n     <h2>Map of NSW COVID-19 case locations</h2>\n   <div id=\"mapContainer\"></div>\n </div>\n</template>\n\n<script>\nimport \"leaflet/dist/leaflet.css\";\nimport { api } from '../helpers/helpers';\nimport L from \"leaflet\";\nimport _ from 'lodash';\n\n\nexport default {\n    name: \"Map\",\n    data() {\n        return{\n            NSWGeoJson: [],\n            dailyCasesInState: [],\n            center: [-33.8555, 151.1155],\n        }\n    },\n    methods: {\n        getColor(d) {\n                return  d > 1000 ? '#3D2807' :\n                        d > 500  ? '#bd0026' :\n                        d > 100  ? '#fb6a4a' :\n                        d > 50   ? '#fe9929' :\n                        d > 9   ?   'yellow' :\n                                    '#f0f0f0';\n        },\n        styleMap(feature){\n            if (feature?.properties.LGA_CODE19) {\n                const lgaCode = feature.properties.LGA_CODE19;\n                const numberOfCasesByLga = _.find(this.dailyCasesInState, {lga_code: lgaCode});\n            \n                const totalCases = numberOfCasesByLga?.total_cases || 0;\n                const color = this.getColor(totalCases);\n                return { \n                    color: \"black\",\n                    fillColor: color,\n                    weight: 1,\n                    // opacity: 0.5,\n                    fillOpacity: 1\n                };\n            } else {\n                return { color: \"white\" };\n            }\n        },\n\n        onEachFeature(feature, layer) {\n            if (feature?.properties.LGA_CODE19) {\n                 const numberOfCasesByLga = _.find(this.dailyCasesInState, {lga_code: feature.properties.LGA_CODE19});\n\n                if (numberOfCasesByLga) {\n                    layer.bindPopup(`${feature.properties.LGA_NAME19.bold()}, Total cases: ${numberOfCasesByLga.total_cases}`);\n                    layer.on('mouseover', () => { layer.openPopup(); });\n                    layer.on('mouseout', () => { layer.closePopup(); });\n                }\n            }\n        },\n        \n        setupLeafletMap: function () {\n            const mapDiv = L.map(\"mapContainer\").setView(this.center, 8);\n            L.tileLayer(\n                \"https://api.mapbox.com/styles/v1/moabyari/cktbirbqp2m7v17o50gpwe5x6/tiles/{z}/{x}/{y}?access_token={accessToken}\",\n                {\n                    attribution:\n                    'Map data (c) <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery (c) <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n                    maxZoom: 16,\n                    minZoom: 7,\n                    id: \"mapbox/streets-v11\",\n                    accessToken: \"XXX\",\n                }).addTo(mapDiv);\n\n            L.geoJson(this.NSWGeoJson, {onEachFeature: this.onEachFeature, style: this.styleMap}).addTo(mapDiv);\n        },\n    },\n    async mounted() {\n        this.NSWGeoJson = await api.getNSWGeoJson();\n        this.dailyCasesInState = _.uniqBy(await api.getCasesInState(), 'lga_code');\n        this.setupLeafletMap();\n        this.styleMap();\n    }\n};\n</script>\n\n<style scoped>\n    #mapContainer {\n        width: 700px;\n        height: 90vh;\n        margin: 0 auto;\n    }\n</style>"],"sourceRoot":"src/components"}]}